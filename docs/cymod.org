#+TITLE: Cymod development planning

* Versions
** Version 0.1
*** Completion criteria 
- Stable API
- Supports constructing a model specification graph database from either graph
  structured (Cypher files) or tabular ([[https://pandas.pydata.org][~pandas~]] DataFrame) data sources
  (~.csv~ or ~.xlsx~).
- Data will be loaded into the Neo4j graph database specified by the
  ~dbms.active_database~ and ~dbms.directories.data~ settings in the Neo4j
  server configuration file ~neo4j.conf~.
- Works in Python 2.7, 3.5, 3.6 and 3.7
- /Experimentally/ supports an EmbeddedGraphLoader. This is not importable from
  the cymod package (i.e. can't be imported with ~from cymod import *~) but can
  be loaded directly from the relevant module by a user who knows what they are
  doing.

*** Use Cases
:PROPERTIES:
:CUSTOM_ID: cymod-v0.1-use-cases
:END:
**** UC1: Load model specified by Cypher files into Neo4j server
:PROPERTIES:
:CUSTOM_ID: cymod-v0.1-UC1
:END:
***** Use case description 
User John has prepared the following project directory containing data
specifying the model he wants to load into Neo4j server. 

#+BEGIN_EXAMPLE
.
└── cypher-files
    ├── dir1
    │   ├── queries1.cypher
    │   └── queries2.cql
    └── dir2
        └── queries3.cyp
#+END_EXAMPLE

There are three files containing Cypher queries in the subdirectories of the
~cypher-files~ directory, each with a different file extension recognised by
cymod: ~.cypher~, ~.cql~, and ~.cyp~. All of these should be loaded into Neo4j server.

***** API usage
#+BEGIN_SRC python
from cymod import ServerGraphLoader

# initialise a ServerGraphLoader object using your Neo4j credentials
gl = ServerGraphLoader(user="username", password="password")

# read cypher queries from files in cypher-files directory
gl.load_cypher("cypher-files")

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC

**** UC2: Load model specified by Cypher files suffixed by '_w' into Neo4j server
:PROPERTIES:
:CUSTOM_ID: cymod-v0.1-UC1
:END:
***** Use case description 
User Sue has prepared the following project directory containing data
specifying the model she wants to load into Neo4j server. 

#+BEGIN_EXAMPLE
.
└── cypher-files
    ├── queries_r.cql
    └── queries_w.cql
#+END_EXAMPLE

There are two files containing Cypher queries in the ~cypher-files~ directory,
but only the one with the pre-extension file suffix ~'-w'~ is intended to be
loaded into the database -- Sue uses the file with name suffixed ~-r~ during
development and keeps it alongside the file whose contents should be loaded into
the database for convenience.

***** API usage
#+BEGIN_SRC python
from cymod import ServerGraphLoader

# initialise a ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# read cypher queries from files in cypher-files directory
gl.load_cypher("cypher-files", cypher_file_suffix="_w")

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC


**** UC3: Load model specified by Cypher files requiring global parameters into Neo4j server
***** Use case description 
User Chris has prepared the following project directory containing data
specifying the model he wants to load into Neo4j server.

#+BEGIN_EXAMPLE
.
├── cypher-files
│   └── queries.cql
└── parameters.json
#+END_EXAMPLE

The file ~cypher-files/queries.cql~ contains Cypher queries which reference
[[https://neo4j.com/docs/cypher-manual/current/syntax/parameters/][parameters]] called ~model_ID~ and ~model_version~ which are specified as json
data in the file ~parameters.json~.

#+BEGIN_EXAMPLE
$ cat parameters.json 
{
    "model_ID": "cymod-test-model"
    "model_version": "0.0.15" 
}
#+END_EXAMPLE

***** API usage
#+BEGIN_SRC python
from cymod import ServerGraphLoader, read_params_file

# initialise a ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# create a CypherParams object to hold the parameters available to all 
# cypher files
params = read_params_file("parameters.json")

# read cypher queries from files in cypher-files directory
gl.load_cypher("cypher-files", global_params=params)

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC

**** UC4: Load model specified by a transition table into Neo4j server
:PROPERTIES:
:CUSTOM_ID: UC4-trans-table
:END:

***** Model description
User Dave doesn't have any Cypher files to load into Neo4j server, instead he
intends to construct a model using tabular data specified in the file
~model.csv~. This file has the following structure:

| start  | end    | cond1 | cond2 | trans_time |
|--------+--------+-------+-------+------------|
| state1 | state2 | FALSE | low   |          2 |
| state2 | state3 | TRUE  | high  |          3 |

Each row corresponds to an individual transition rule. Importantly, identifiers
for the start and end states of each transition are specified in the 'start'
and 'end' columns.

This tabular data can be loaded into the graph database using ~cymod~ as
follows:

***** API usage
#+BEGIN_SRC python
import pandas as pd
from cymod import ServerGraphLoader

# Initialise ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# Prepare pandas dataframe
trans_df = pd.read_csv("model.csv")

# Load the tabular data into the ServerGraphLoader object
gl.load_tabular(trans_df, start_state_col="start", end_state_col="end")

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC

**** UC5: Load model specified by a transition table into Neo4j server using custom node labels
***** Use case description
User Dave wants to give the nodes in the model generated in [[#UC4-trans-table][UC4]] some customised
domain specific labels. ~State~ nodes should be labelled ~LandCoverState~,
~Transition~ nodes should be labelled ~LandCoverTransition~, and ~Condition~
nodes should be labelled ~EnvironCodition~.

This can be achieved by modifying the code used for [[#UC4-trans-table][UC4]] as follows:

***** API usage
#+BEGIN_SRC python
import pandas as pd
from cymod import ServerGraphLoader, NodeLabels

# Initialise ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# Prepare pandas dataframe
trans_df = pd.read_csv("model.csv")

# Specify custom node labels
labels = NodeLabels({"State": "LandCoverState", 
                     "Transition": "LandCoverTransition",
                     "Condition" : "EnvironCondition"})

# Load the tabular data into the ServerGraphLoader object
gl.load_tabular(trans_df, start_state_col="start", end_state_col="end",
                labels=labels)

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC


**** UC6: Load model specified by a transition table into Neo4j including global parameters applied to every node
***** Use case description
User Dave wants to ensure each of the nodes in the model generated in [[#UC4-trans-table][UC4]] have
two 'global parameters' assigned to them, to enable for easy selection of nodes
with a specific ~model_ID~ and ~version~ number from within the Neo4j database
as a whole.

Dave has prepared a JSON file, ~table_global_params.json~, containing these
parameters and saved this as part of his model code. This data can be loaded
and inserted into the model graph, modifying the code used for [[#UC4-trans-table][UC4]] as follows:

***** API usage
#+BEGIN_SRC python
import pandas as pd
from cymod import ServerGraphLoader, read_params_file

# Initialise ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# Prepare pandas dataframe
trans_df = pd.read_csv("model.csv")

# Load json file into a dictionary, performing appropriate sense checks
global_params = read_params_file("table_global_params.json")

# Load the tabular data into the ServerGraphLoader object
gl.load_tabular(trans_df, start_state_col="start", end_state_col="end",
                global_params=global_params)

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC


**** UC7: Load model specified by a coded succession transition table into Neo4j server
:PROPERTIES:
:CUSTOM_ID: cymod-UC7
:END:
***** Use case description
Jenny has the same table to load into Neo4j server as Dave (of [[#UC4-trans-table][UC4]] fame) did
but, being of a quantitative bent, Jenny has encoded the data using numerical
codes.

| start | end | cond1 | cond2 | trans_time |
|-------+-----+-------+-------+------------|
|     0 |   1 |     0 |     0 |          2 |
|     1 |   2 |     1 |     2 |          3 |

These codes have the following meanings:

- States: ~0=state1~, ~1=state2~
- ~cond1~: ~0=False~, ~1=True~
- ~cond2~: ~0=low~, ~1=high~

The ~trans_time~ column contains numerical data as was the case in UC4.

***** API usage
:PROPERTIES:
:CUSTOM_ID: cymod-UC7-API
:END:
#+BEGIN_SRC python
import pandas as pd
from cymod import ServerGraphLoader, EnvrStateAliasTranslator

# Set up EnvrStateAliasTranslator and configure with relevant model-specific data
trans = EnvrStateAliasTranslator()
trans.state_aliases = {0: "state1", 1: "state2", 2: "state3"}
trans.add_cond_aliases("cond1", {0: False, 1: True})
trans.add_cond_aliases("cond2", {0: "low", 1: "high"})

# Initialise ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# Prepare pandas dataframe
trans_df = pd.read_csv("coded_model.csv")

# Load the tabular data into the ServerGraphLoader object
gl.load_tabular(trans_df, start_state_col="start", end_state_col="end", 
                state_alias_translator=trans)
#+END_SRC

**** UC8: Load model specified by a mixture of Cypher files and a natural language succession table into Neo4j server

***** Use case description
Emma has a model which embellishes the table Dave made in [[#UC4-trans-table][UC4]] with some Cypher
queries contained in ~cypher-files/queries.cql~. She assumes it doesn't matter
whether the data from table or the Cypher queries is loaded into the database first.

#+BEGIN_EXAMPLE
.
├── cypher-files
│   └── queries.cql
└── model.csv
#+END_EXAMPLE

These can both be loaded into Neo4j server as follows:

***** API Usage
#+BEGIN_SRC python
import pandas as pd
from cymod import ServerGraphLoader

# Initialise ServerGraphLoader object
gl = ServerGraphLoader(user="username", password="password")

# Prepare pandas dataframe
trans_df = pd.read_csv("model.csv")

# Load the tabular data into the ServerGraphLoader object
gl.load_tabular(trans_df, start_state_col="start", end_state_col="end")

# Load the data from the Cypher file
gl.load_cypher("cypher-files")

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC

*** Development plan
**** v0.0.3
Supports loading cypher files with new API (UC1 - UC3)

**** v0.0.4
Supports loading natural language succession table including custom node labels
and/or global parameters (UC4 - UC6)

**** v0.0.5
Supports coded succession table (UC7)

**** v0.0.6 / v0.1.0
Adds support for python 3

** Version 0.2
*** Completion criteria
Adds functionality to specify which Neo4j database should be used as the data
loading target. This will make it easier to generate multiple different graph
data stores, encoding multiple different model structures.
*** Use cases
**** Use non-standard graph location
Suppose we want to load our model data into a graph database called
~mymodel.db~ stored within in the directory ~~/graphs~. This can be achieved as follows:

#+BEGIN_SRC python
from cymod import ServerGraphLoader

# initialise a ServerGraphLoader object using a non-standard database location
gl = ServerGraphLoader(user="username", password="password",
                       data_dir="~/graphs", database="mymodel.db")

# read cypher queries from files in model/views directory
gl.load_cypher("cypher-files")

# run these queries against the graph specified in the neo4j configuration file
gl.commit()
#+END_SRC

Note that this script would likely require root privileges to run as it will
need to modify (and then revert) the Neo4j configuration file ~neo4j.conf~

** Version 0.3
Adds functionality to supply queries to an embedded Neo4j graph instance. This
will create the possibility of loading Cypher and/ or tabular data into a
simulation model on a computer which doesn't have Neo4j Server installed. That
is, the simulation model will be configured by the source files directly, not a
graph data store previously generated by Neo4j server.

This might manifest itself by either:
1. Providing an interface via Jython
2. Relying on the calling Java application being able to call python as an
   external process. 

* Modelling
** Scenario 1






* Integration with AgroSuccess
** With Jython
As of [2019-01-15 Tue] AgroSuccess has only been tested with Cymod v0.0.1
running within jython v2.7.0

** With [[https://github.com/ninia/jep][JEP]]
- Not tried with Cymod yet [2019-01-15 Tue]
- Recommended [[https://stackoverflow.com/questions/8898765/calling-python-in-java#answer-42844490][in this SO answer]]
- Embeds CPython and supports Python 3.7
- More commits than jpy. [[https://groups.google.com/forum/#!topic/jep-project/D6FGDTWCIlI][Thread]] discussing comparison between JEP and jPy

** With [[https://github.com/bcdev/jpy][jPy]]
- Not tried with Cymod yet [2019-01-15 Tue]
- Recommended [[https://stackoverflow.com/questions/8898765/calling-python-in-java#answer-42844490][in this SO answer]] 
- Developed to support writing python extension for established scientific
  application written in Java


